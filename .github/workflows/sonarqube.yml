name: SonarQube Analysis

on:
  push:
    branches: [ main, develop, upgrade/deps-major ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  sonarqube-analysis:
    name: SonarQube Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up Flutter
      id: flutter-setup
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
      continue-on-error: false
    
    - name: Verify Flutter Installation
      if: always()
      run: |
        if command -v flutter &> /dev/null; then
          echo "‚úÖ Flutter successfully installed"
          flutter --version
          flutter doctor --no-version-check
        else
          echo "‚ùå Flutter installation failed"
          echo "::error::Flutter SDK installation failed - cannot proceed with Flutter tests"
          exit 1
        fi
    
    - name: Set up Node.js
      id: node-setup
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
      continue-on-error: false
    
    - name: Verify Node.js Installation
      if: always()
      run: |
        if command -v node &> /dev/null && command -v npm &> /dev/null; then
          echo "‚úÖ Node.js and npm successfully installed"
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
        else
          echo "‚ùå Node.js/npm installation failed"
          echo "::error::Node.js installation failed - backend tests will be skipped"
        fi
    
    # Flutter Frontend Analysis
    - name: Install Flutter dependencies
      id: flutter-deps
      run: |
        echo "üì¶ Installing Flutter dependencies..."
        if flutter pub get; then
          echo "‚úÖ Flutter dependencies installed successfully"
        else
          echo "‚ùå Flutter dependencies installation failed"
          echo "::error::Failed to install Flutter dependencies - checking pubspec.yaml"
          cat pubspec.yaml | head -20
          exit 1
        fi
      continue-on-error: false
    
    - name: Run Flutter tests with coverage
      id: flutter-tests
      run: |
        echo "üß™ Running Flutter tests with coverage..."
        if flutter test --coverage; then
          echo "‚úÖ Flutter tests completed successfully"
          if [ -f "coverage/lcov.info" ]; then
            echo "‚úÖ Coverage report generated"
            echo "Coverage file size: $(wc -l < coverage/lcov.info) lines"
          else
            echo "‚ö†Ô∏è Coverage report not found"
          fi
        else
          echo "‚ùå Flutter tests failed"
          echo "::error::Flutter test suite failed - check test outputs above"
          exit 1
        fi
      continue-on-error: false
    
    - name: Generate HTML coverage report
      if: steps.flutter-tests.outcome == 'success'
      run: |
        echo "üìä Generating HTML coverage report..."
        if command -v genhtml &> /dev/null; then
          genhtml coverage/lcov.info -o coverage/html
          echo "‚úÖ HTML coverage report generated"
        else
          echo "‚ö†Ô∏è genhtml not available - installing lcov"
          sudo apt-get update && sudo apt-get install -y lcov
          genhtml coverage/lcov.info -o coverage/html
          echo "‚úÖ HTML coverage report generated"
        fi
      continue-on-error: true
    
    - name: Flutter Code Analysis
      id: flutter-analysis
      run: |
        echo "üîç Running Flutter code analysis..."
        if flutter analyze --no-fatal-infos; then
          echo "‚úÖ Flutter analysis completed successfully"
        else
          echo "‚ö†Ô∏è Flutter analysis found issues (non-blocking)"
          echo "::warning::Flutter analysis issues detected - review output above"
        fi
      continue-on-error: true
    
    # Backend Analysis
    - name: Check Backend Directory
      id: backend-check
      run: |
        if [ -d "./backend" ] && [ -f "./backend/package.json" ]; then
          echo "‚úÖ Backend directory and package.json found"
          echo "backend-exists=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Backend directory or package.json not found - skipping backend tests"
          echo "backend-exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Install Backend dependencies
      id: backend-deps
      if: steps.backend-check.outputs.backend-exists == 'true'
      working-directory: ./backend
      run: |
        echo "üì¶ Installing Backend dependencies..."
        if npm ci; then
          echo "‚úÖ Backend dependencies installed successfully"
          echo "Installed packages:"
          npm list --depth=0 || true
        else
          echo "‚ùå Backend dependencies installation failed"
          echo "::error::Failed to install backend dependencies"
          echo "package.json contents:"
          cat package.json | head -20
          exit 1
        fi
      continue-on-error: false
    
    - name: Run Backend linting
      id: backend-lint
      if: steps.backend-deps.outcome == 'success'
      working-directory: ./backend
      run: |
        echo "üîç Running Backend ESLint analysis..."
        if npm run lint; then
          echo "‚úÖ Backend linting completed successfully"
        else
          echo "‚ö†Ô∏è Backend linting found issues (non-blocking)"
          echo "::warning::Backend linting issues detected - review output above"
        fi
      continue-on-error: true
    
    - name: Run Backend tests with coverage
      id: backend-tests
      if: steps.backend-deps.outcome == 'success'
      working-directory: ./backend
      run: |
        echo "üß™ Running Backend tests with coverage..."
        if npm run test:coverage; then
          echo "‚úÖ Backend tests completed successfully"
          if [ -f "coverage/lcov.info" ]; then
            echo "‚úÖ Backend coverage report generated"
            echo "Coverage file size: $(wc -l < coverage/lcov.info) lines"
          else
            echo "‚ö†Ô∏è Backend coverage report not found"
          fi
        else
          echo "‚ùå Backend tests failed"
          echo "::error::Backend test suite failed - check test outputs above"
          echo "Available npm scripts:"
          npm run --silent 2>/dev/null || echo "npm run command failed"
          exit 1
        fi
      continue-on-error: false
    
        # SonarQube Configuration Check
    - name: Check SonarQube Configuration
      id: sonar-config
      run: |
        echo "üîç Checking SonarQube configuration..."
        if [ -n "${{ secrets.SONAR_TOKEN }}" ]; then
          echo "‚úÖ SONAR_TOKEN is configured"
          echo "sonar-configured=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è SONAR_TOKEN is not configured"
          echo "sonar-configured=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for coverage files
        if [ -f "coverage/lcov.info" ]; then
          echo "‚úÖ Flutter coverage file exists"
        else
          echo "‚ö†Ô∏è Flutter coverage file missing"
        fi
        
        if [ -f "backend/coverage/lcov.info" ]; then
          echo "‚úÖ Backend coverage file exists"
        else
          echo "‚ö†Ô∏è Backend coverage file missing"
        fi
    
    # SonarQube Analysis (with comprehensive error handling)
    - name: SonarQube Scan
      id: sonar-scan
      if: steps.sonar-config.outputs.sonar-configured == 'true'
      uses: sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=afo-chat-application
          -Dsonar.organization=getinetaga
          -Dsonar.sources=lib,backend/src
          -Dsonar.tests=test,backend/test
          -Dsonar.dart.coverage.reportPaths=coverage/lcov.info
          -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info
          -Dsonar.typescript.lcov.reportPaths=backend/coverage/lcov.info
          -Dsonar.pullrequest.key=${{ github.event.number }}
          -Dsonar.pullrequest.branch=${{ github.head_ref }}
          -Dsonar.pullrequest.base=${{ github.base_ref }}
      continue-on-error: true
    
    # SonarQube Analysis Result Check
    - name: Check SonarQube Analysis Result
      if: steps.sonar-config.outputs.sonar-configured == 'true'
      run: |
        if [ "${{ steps.sonar-scan.outcome }}" == "success" ]; then
          echo "‚úÖ SonarQube analysis completed successfully"
        else
          echo "‚ùå SonarQube analysis failed"
          echo "::warning::SonarQube analysis failed - possible causes:"
          echo "  - Invalid SONAR_TOKEN"
          echo "  - Network connectivity issues"
          echo "  - SonarCloud service unavailable"
          echo "  - Project configuration issues"
        fi
    
    # Quality Gate Check (with error handling)
    - name: SonarQube Quality Gate Check
      id: quality-gate
      if: steps.sonar-scan.outcome == 'success'
      uses: sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      continue-on-error: true
    
    # Quality Gate Result Check
    - name: Check Quality Gate Result
      if: steps.sonar-scan.outcome == 'success'
      run: |
        if [ "${{ steps.quality-gate.outcome }}" == "success" ]; then
          echo "‚úÖ SonarQube Quality Gate passed"
        else
          echo "‚ö†Ô∏è SonarQube Quality Gate failed or timed out"
          echo "::warning::Quality Gate issues detected - check SonarCloud dashboard"
          echo "Dashboard: https://sonarcloud.io/project/overview?id=afo-chat-application"
        fi
    
    # SonarQube Setup Instructions (when secrets not configured)
    - name: SonarQube Setup Notice
      if: steps.sonar-config.outputs.sonar-configured == 'false'
      run: |
        echo "‚ÑπÔ∏è SonarQube Analysis Configuration Status:"
        echo "üìä Tests and Coverage: ‚úÖ Completed successfully"
        echo "üîç Code Quality Analysis: ‚è≥ Pending SonarCloud setup"
        echo ""
        echo "To enable full SonarQube analysis:"
        echo "1. üåê Set up SonarCloud account at https://sonarcloud.io"
        echo "2. üîë Generate authentication token in SonarCloud"
        echo "3. üîê Add SONAR_TOKEN to repository secrets"
        echo "4. üöÄ Quality analysis will run automatically on next push"
        echo ""
        echo "Current workflow status: All tests passing ‚úÖ"
    
    # Quality Gate Check (will run with continue-on-error if secrets missing)
    - name: SonarQube Quality Gate Check
      uses: sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      continue-on-error: true
    
    # SonarQube Setup Instructions
    - name: SonarQube Setup Notice
      run: |
        echo "‚ÑπÔ∏è  SonarQube Analysis Configuration:"
        echo "- If analysis failed, SONAR_TOKEN may not be configured"
        echo "- To enable full SonarQube analysis:"
        echo "  1. Set up SonarCloud account at https://sonarcloud.io"
        echo "  2. Add SONAR_TOKEN to repository secrets"
        echo "  3. Quality analysis will run automatically on next push"
        echo "- Tests and code quality checks completed successfully!"
    
    # Coverage Report Validation
    - name: Validate Coverage Reports
      id: coverage-validation
      if: always()
      run: |
        echo "üìä Validating coverage reports..."
        coverage_files=""
        
        if [ -f "coverage/lcov.info" ]; then
          echo "‚úÖ Flutter coverage report found"
          echo "Flutter coverage lines: $(wc -l < coverage/lcov.info)"
          coverage_files="./coverage/lcov.info"
        else
          echo "‚ö†Ô∏è Flutter coverage report missing"
        fi
        
        if [ -f "backend/coverage/lcov.info" ]; then
          echo "‚úÖ Backend coverage report found" 
          echo "Backend coverage lines: $(wc -l < backend/coverage/lcov.info)"
          if [ -n "$coverage_files" ]; then
            coverage_files="$coverage_files,./backend/coverage/lcov.info"
          else
            coverage_files="./backend/coverage/lcov.info"
          fi
        else
          echo "‚ö†Ô∏è Backend coverage report missing"
        fi
        
        if [ -n "$coverage_files" ]; then
          echo "coverage-files=$coverage_files" >> $GITHUB_OUTPUT
          echo "has-coverage=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Coverage validation completed"
        else
          echo "has-coverage=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è No coverage files found"
        fi
    
    # Upload coverage reports to Codecov
    - name: Upload coverage reports to Codecov
      id: codecov-upload
      if: steps.coverage-validation.outputs.has-coverage == 'true'
      uses: codecov/codecov-action@v3
      with:
        files: ${{ steps.coverage-validation.outputs.coverage-files }}
        flags: unittests
        name: afo-chat-coverage
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true
    
    # Check Codecov upload result
    - name: Check Codecov Upload Result
      if: steps.coverage-validation.outputs.has-coverage == 'true'
      run: |
        if [ "${{ steps.codecov-upload.outcome }}" == "success" ]; then
          echo "‚úÖ Coverage reports uploaded to Codecov successfully"
        else
          echo "‚ö†Ô∏è Codecov upload failed (non-blocking)"
          echo "::warning::Coverage upload to Codecov failed - reports still available as artifacts"
        fi
    
    # Archive code coverage results (with error handling)
    - name: Archive code coverage results
      id: archive-coverage
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: |
          coverage/
          backend/coverage/
        retention-days: 30
      continue-on-error: true
    
    # Check artifact upload result
    - name: Check Coverage Artifact Upload
      if: always()
      run: |
        if [ "${{ steps.archive-coverage.outcome }}" == "success" ]; then
          echo "‚úÖ Coverage artifacts uploaded successfully"
        else
          echo "‚ö†Ô∏è Coverage artifact upload failed"
          echo "::warning::Failed to archive coverage reports"
        fi
    
    # Final workflow status summary
    - name: Workflow Status Summary
      if: always()
      run: |
        echo "üéØ AFO Chat Application - CI/CD Workflow Summary"
        echo "=================================================="
        
        # Flutter Status
        if [ "${{ steps.flutter-tests.outcome }}" == "success" ]; then
          echo "‚úÖ Flutter Tests: PASSED"
        else
          echo "‚ùå Flutter Tests: FAILED"
        fi
        
        # Backend Status  
        if [ "${{ steps.backend-tests.outcome }}" == "success" ]; then
          echo "‚úÖ Backend Tests: PASSED"
        elif [ "${{ steps.backend-check.outputs.backend-exists }}" == "false" ]; then
          echo "‚è≠Ô∏è Backend Tests: SKIPPED (no backend found)"
        else
          echo "‚ùå Backend Tests: FAILED"
        fi
        
        # SonarQube Status
        if [ "${{ steps.sonar-config.outputs.sonar-configured }}" == "true" ]; then
          if [ "${{ steps.sonar-scan.outcome }}" == "success" ]; then
            echo "‚úÖ SonarQube Analysis: COMPLETED"
          else
            echo "‚ö†Ô∏è SonarQube Analysis: FAILED"
          fi
        else
          echo "‚è≥ SonarQube Analysis: PENDING SETUP"
        fi
        
        # Coverage Status
        if [ "${{ steps.coverage-validation.outputs.has-coverage }}" == "true" ]; then
          echo "‚úÖ Coverage Reports: GENERATED"
        else
          echo "‚ö†Ô∏è Coverage Reports: MISSING"
        fi
        
        echo "=================================================="
        echo "üöÄ Workflow completed - Check individual steps for details"